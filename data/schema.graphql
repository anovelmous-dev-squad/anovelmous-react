type Chapter implements Node {
  id: ID!
  title: String
  tokens(before: String, after: String, first: Int, last: Int): TokenConnection
  votingDuration: Int
  tokenAddedAt: String
}

type ChapterConnection {
  pageInfo: PageInfo!
  edges: [ChapterEdge]
}

type ChapterEdge {
  node: Chapter
  cursor: String!
}

type Contributor implements Node {
  id: ID!
  name: String
  novel(id: String!): Novel
  novels(before: String, after: String, first: Int, last: Int): NovelConnection
  vocabulary(before: String, after: String, first: Int, last: Int): TokenConnection
  votes(before: String, after: String, first: Int, last: Int): VoteConnection
}

interface Node {
  id: ID!
}

type Novel implements Node {
  id: ID!
  title: String
  chapter(id: String, mostRecent: Boolean = false): Chapter
  chapters(before: String, after: String, first: Int, last: Int): ChapterConnection
}

type NovelConnection {
  pageInfo: PageInfo!
  edges: [NovelEdge]
}

type NovelEdge {
  node: Novel
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Root {
  viewer: Contributor
  node(id: ID!): Node
}

type Token implements Node {
  id: ID!
  content: String
  isPunctuation: Boolean
  createdAt: String
  isValid: Boolean
}

type TokenConnection {
  pageInfo: PageInfo!
  edges: [TokenEdge]
}

type TokenEdge {
  node: Token
  cursor: String!
}

type Vote implements Node {
  id: ID!
  chapter: ID!
  contributor: ID!
  token: ID!
  ordinal: Int
  selected: Boolean
  createdAt: String
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]
}

type VoteEdge {
  node: Vote
  cursor: String!
}
