input CastVoteInput {
  tokenId: String!
  chapterId: String!
  ordinal: Int!
  clientMutationId: String!
}

type CastVotePayload {
  voteEdge: VoteEdge
  viewer: Contributor
  clientMutationId: String!
}

type Chapter implements Node {
  id: ID!
  title: String
  tokens(before: String, after: String, first: Int, last: Int): TokenConnection
  votingDuration: Int
  prevVotingEndedAt: String
  tokenCount: Int
}

type ChapterConnection {
  pageInfo: PageInfo!
  edges: [ChapterEdge]
}

type ChapterEdge {
  node: Chapter
  cursor: String!
}

type Character implements Node {
  id: ID!
  firstName: String
  lastName: String
  bio: String
}

type CharacterConnection {
  pageInfo: PageInfo!
  edges: [CharacterEdge]
}

type CharacterEdge {
  node: Character
  cursor: String!
}

type Contributor implements Node {
  id: ID!
  name: String
  novel(id: String!): Novel
  novels(before: String, after: String, first: Int, last: Int): NovelConnection
  vocabulary(before: String, after: String, first: Int, last: Int): TokenConnection
  votes(before: String, after: String, first: Int, last: Int): VoteConnection
  characters(before: String, after: String, first: Int, last: Int): CharacterConnection
  places(before: String, after: String, first: Int, last: Int): PlaceConnection
  plotItems(before: String, after: String, first: Int, last: Int): PlotItemConnection
}

input CreateCharacterInput {
  firstName: String!
  lastName: String
  bio: String!
  novelId: String!
  clientMutationId: String!
}

type CreateCharacterPayload {
  characterEdge: CharacterEdge
  viewer: Contributor
  clientMutationId: String!
}

input CreatePlaceInput {
  name: String!
  description: String!
  novelId: String!
  clientMutationId: String!
}

type CreatePlacePayload {
  placeEdge: PlaceEdge
  viewer: Contributor
  clientMutationId: String!
}

input CreatePlotItemInput {
  name: String!
  description: String!
  novelId: String!
  clientMutationId: String!
}

type CreatePlotItemPayload {
  placeEdge: PlotItemEdge
  viewer: Contributor
  clientMutationId: String!
}

type Mutation {
  castVote(input: CastVoteInput!): CastVotePayload
  createCharacter(input: CreateCharacterInput!): CreateCharacterPayload
  createPlace(input: CreatePlaceInput!): CreatePlacePayload
  createPlotItem(input: CreatePlotItemInput!): CreatePlotItemPayload
}

interface Node {
  id: ID!
}

type Novel implements Node {
  id: ID!
  title: String
  chapter(id: String, mostRecent: Boolean = false): Chapter
  chapters(before: String, after: String, first: Int, last: Int): ChapterConnection
}

type NovelConnection {
  pageInfo: PageInfo!
  edges: [NovelEdge]
}

type NovelEdge {
  node: Novel
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Place implements Node {
  id: ID!
  name: String
  description: String
}

type PlaceConnection {
  pageInfo: PageInfo!
  edges: [PlaceEdge]
}

type PlaceEdge {
  node: Place
  cursor: String!
}

type PlotItem implements Node {
  id: ID!
  name: String
  description: String
}

type PlotItemConnection {
  pageInfo: PageInfo!
  edges: [PlotItemEdge]
}

type PlotItemEdge {
  node: PlotItem
  cursor: String!
}

type Root {
  viewer: Contributor
  node(id: ID!): Node
}

type Token implements Node {
  id: ID!
  content: String
  isPunctuation: Boolean
  createdAt: String
  isValid: Boolean
}

type TokenConnection {
  pageInfo: PageInfo!
  edges: [TokenEdge]
}

type TokenEdge {
  node: Token
  cursor: String!
}

type Vote implements Node {
  id: ID!
  token: Token
  ordinal: Int
  selected: Boolean
  createdAt: String
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]
}

type VoteEdge {
  node: Vote
  cursor: String!
}
